% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regex2fixed.R
\name{regex2fixed}
\alias{regex2fixed}
\alias{regex2id}
\title{convert regex and glob patterns to type IDs or fixed patterns}
\usage{
regex2fixed(pattern, types, valuetype, case_insensitive = FALSE,
  index = TRUE)

regex2id(pattern, types, valuetype, case_insensitive = FALSE, index = TRUE)
}
\arguments{
\item{pattern}{a character vector, list of character vectors, \link{dictionary},
\link{collocations}, or \link{dfm}. See \link{pattern} for details.}

\item{types}{unique types of tokens obtaine by \code{quanteda:::types()}}

\item{valuetype}{the type of pattern matching: \code{"glob"} for 
"glob"-style wildcard expressions; \code{"regex"} for regular expressions;
or \code{"fixed"} for exact matching. See \link{valuetype} for details.}

\item{case_insensitive}{ignore case when matching, if \code{TRUE}}

\item{index}{If TRUE, index is constructed automatically. It also accept
index constructed by index_types().}
}
\value{
\code{regex2fixed} returns a list of character vectors containing
  types

\code{regex2id} returns a list of integer vectors containing type
  IDs
}
\description{
\code{regex2fixed} converts regex and glob patterns to fixed patterns.

\code{regex2id} converts regex or glob to type IDs to allow C++
  function to perform fast searches in tokens object. C++ functions use a
  list of type IDs to construct a hash table, agaist which sub-vectors of
  tokens object are matched.
}
\examples{
pattern <- list(c('^a$', '^b'), c('c'), c('d'))
types <- c('A', 'AA', 'B', 'BB', 'BBB', 'C', 'CC')
quanteda:::regex2fixed(pattern, types, 'regex', case_insensitive=TRUE)
index <- quanteda:::index_types(types, 'regex', case_insensitive=TRUE)
quanteda:::regex2fixed(pattern, types, 'regex', case_insensitive=TRUE, index=index)
pattern <- list(c('^a$', '^b'), c('c'), c('d'))
types <- c('A', 'AA', 'B', 'BB', 'BBB', 'C', 'CC')
quanteda:::regex2id(pattern, types, 'regex', case_insensitive=TRUE)
}
\keyword{internal}
